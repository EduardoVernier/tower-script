Recursos Necessários
A solução implementada deve usar os recursos especificados nesta seção. Caso um recurso não esteja disponível na linguagem,explique e justique os motivos e utilize um mecanismo alternativo. Esta escolha deve estar presente no relatório. Segue a lista de recursos necessários e que devem estar presentes na solução do grupo.

R1ˆ Definição e uso de classes (sejam utilitárias ou para representar as 
estruturas de dados utilizadas pelo programa)
	Tower.js, Enemy.js
R2ˆ Encapsulamento e proteção dos atributos, com os devidos métodos de manipulação (setters/getters).
	
ˆR3 Especificação de construtores-padrão para a inicialização dos atributos e, quando possível, construtores
ˆR4 Especificação de destrutores (ou métodos de clean-up), se necessário.
ˆR5 Organização do código em espaços de nome diferenciados, conforme a função ou estrutura de cada classe
ˆR6 Mecanismo de herança, em especial:
 	especificação de pelo menos três níveis de hierarquia, sendo uma classe mais genérica (e abstrata, ver a seguir)
 	especificação de pelo menos uma classe abstrata (ou interface) a ser especializada (ou implementada) nas classes
fifilhas
R7 demonstração de polimorfismo por inclusão (variável ou coleção genérica manipulando entidades de classes filhas,
chamando métodos ou funções específicas correspondentes)
ˆR8 Polimorfismo paramétrico:
 	especificação de algoritmo (método ou função genérico) utilizando o recurso oferecido pela linguagem (p. ex.,generics,templates)
 	especificação de estrutura de dados genérica utilizando o recurso oferecido pela linguagem (p. ex., generics, templates)
ˆR9 Polimorfismo por sobrecarga (vale construtores alternativos)
ˆR10 Especificação e uso de funções como elementos de 1ª ordem
ˆR11 Especificação e uso de funções de ordem maior (map, reduce, foldr/foldl ou similares)
ˆR12 Uso de listas para a manipulação de estruturas, entidades e elementos em funções de ordem maior. As funções devem ser puras, ou seja, devem criar novas listas (e não manipular as que são recebidas)
ˆR13 Especificação e uso de funções não nomeadas (ou lambda)
ˆR14 Especificação e uso de funções que usem currying
ˆR15 Especificação de funções que utilizem pattern matching na sua definição
ˆR16 Uso de recursão como mecanismo de iteração (pelo menos em funções de ordem maior que manipulem listas)
ˆR17 Especificação e uso de delegates